<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<context:component-scan base-package="org.ailin.iknow.app" />
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"/>
	</bean>
	<!-- druid数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定数据源 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 具体指定xml文件，可不配 -->
<!-- 		<property name="configLocation" value="classpath:mybatis-config.xml"/> -->
		<!-- 自动扫描mapping.xml文件，**表示迭代查找 ,也可在mybatis-config.xml中单独指定xml文件 -->
		<property name="mapperLocations" value="classpath:org/ailin/iknow/app/dao/*.xml"/>
	</bean>
	
    <!-- 自动扫描com/hys/app/**/dao下的所有dao接口，并实现这些接口，可直接在程序中使用dao接口，不用再获取sqlsession对象 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--basePackage 属性是映射器接口文件的包路径。你可以使用分号或逗号 作为分隔符设置多于一个的包路径 -->
        <property name="basePackage" value="org/ailin/iknow/app/dao"/>
        
        <!-- 因为会自动装配 SqlSessionFactory和SqlSessionTemplate -->
		<!-- 所以没 有 必 要 去 指 定 SqlSessionFactory或 SqlSessionTemplate -->
		<!-- 因此可省略不配置； -->
		<!-- 但是,如果你使 用了一个 以上的 DataSource，那么自动装配可能会失效。 -->
		<!-- 这种 情况下，你可以使用sqlSessionFactoryBeanName或sqlSessionTemplateBeanName属性来设置正确的 bean名称来使用； -->
		
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    
    <!-- 1可以根据给定的Mapper接口生成实现组件 -->
<!--     <bean id="iknowBlogsDao" class="org.mybatis.spring.mapper.MapperFactoryBean"> -->
<!--         <property name="mapperInterface" value="org.ailin.iknow.app.dao.IknowBlogsDao"></property> -->
<!--         <property name="sqlSessionFactory" ref="sqlSessionFactory"></property> -->
<!--     </bean> -->
	
	<!-- 自动注册RequestMappingHandlerMapping与RequestMappingHandlerAdapter两个Bean,这是Spring MVC为@Controller分发请求所必需的
        并提供了数据绑定支持、@NumberFormatannotation支持、@DateTimeFormat支持、@Valid支持、读写XML的支持和读写JSON的支持等功能。
	-->
	<mvc:annotation-driven />
	
	<!-- 拦截静态资源的两种方式 -->
	<!-- 
		一、对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，
		如果不是静态资源的请求，才由DispatcherServlet继续处理。 
	-->
<!-- 	<mvc:default-servlet-handler /> -->
	<!-- 
		二、允许静态资源放在任何地方，如WEB-INF目录下、类路径下等，你甚至可以将JavaScript等静态文件打到JAR包中。
		通过location属性指定静态资源的位置，由于location属性是Resources类型，因此可以使用诸如"classpath:"等的资源前缀指定资源位置。
		传统Web容器的静态资源只能放在Web容器的根路径下，<mvc:resources />完全打破了这个限制。 
	-->
<!-- 	<mvc:resources mapping="/resources/**" location="/,classpath:/META-INF/publicResources/" /> -->
	<mvc:resources location="/html/" mapping="/web/html/**" />
	<mvc:resources location="/css/" mapping="/web/css/**" />
	<mvc:resources location="/js/" mapping="/web/js/**" />
<!--     <mvc:resources mapping="/web/**" location="/WEB-INF/" /> -->
    
<!--     <mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/>   -->
<!--     <mvc:resources mapping="/js/**" location="/js/" cache-period="31556926"/>   -->
<!--     <mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/>  -->


	<!-- 配置viewResolver
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>
	 -->
	 
</beans>
